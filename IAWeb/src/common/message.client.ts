// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "message.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EchoService } from "./message";
import type { TimelineData } from "./message";
import type { TrackerInfo } from "./message";
import type { WebRTCAnswer } from "./message";
import type { WebRTCOffer } from "./message";
import type { ReplayMessage } from "./message";
import type { ReplayList } from "./message";
import type { BoardcastMessage } from "./message";
import type { DocumentState } from "./message";
import type { DocumentList } from "./message";
import type { Document } from "./message";
import type { Link } from "./message";
import type { Node } from "./message";
import type { UserInfo } from "./message";
import type { RoomList } from "./message";
import type { UserList } from "./message";
import type { EmptyMessage } from "./message";
import type { LinkList } from "./message";
import type { NodeList } from "./message";
import type { GraphViewData } from "./message";
import type { RequestById } from "./message";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ServerNodesStatus } from "./message";
import type { ClientActions } from "./message";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { InitialGraphData } from "./message";
import type { InitialRequest } from "./message";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service EchoService
 */
export interface IEchoServiceClient {
    /**
     * @generated from protobuf rpc: GetInitialGraphData(InitialRequest) returns (InitialGraphData);
     */
    getInitialGraphData(input: InitialRequest, options?: RpcOptions): UnaryCall<InitialRequest, InitialGraphData>;
    /**
     * @generated from protobuf rpc: UpdateNodesStatus(ClientActions) returns (ServerNodesStatus);
     */
    updateNodesStatus(input: ClientActions, options?: RpcOptions): UnaryCall<ClientActions, ServerNodesStatus>;
    /**
     * @generated from protobuf rpc: GetGraphData(RequestById) returns (stream GraphViewData);
     */
    getGraphData(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, GraphViewData>;
    /**
     * @generated from protobuf rpc: GetNodes(InitialRequest) returns (stream NodeList);
     */
    getNodes(input: InitialRequest, options?: RpcOptions): ServerStreamingCall<InitialRequest, NodeList>;
    /**
     * @generated from protobuf rpc: GetLinks(RequestById) returns (stream LinkList);
     */
    getLinks(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, LinkList>;
    /**
     * @generated from protobuf rpc: GetNodesStatus(RequestById) returns (stream ServerNodesStatus);
     */
    getNodesStatus(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, ServerNodesStatus>;
    /**
     * @generated from protobuf rpc: GetAllUsers(EmptyMessage) returns (stream UserList);
     */
    getAllUsers(input: EmptyMessage, options?: RpcOptions): ServerStreamingCall<EmptyMessage, UserList>;
    /**
     * @generated from protobuf rpc: GetAllUsersByRoomId(RequestById) returns (stream UserList);
     */
    getAllUsersByRoomId(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, UserList>;
    /**
     * @generated from protobuf rpc: GetAllRooms(EmptyMessage) returns (stream RoomList);
     */
    getAllRooms(input: EmptyMessage, options?: RpcOptions): ServerStreamingCall<EmptyMessage, RoomList>;
    /**
     * @generated from protobuf rpc: Join(UserInfo) returns (UserInfo);
     */
    join(input: UserInfo, options?: RpcOptions): UnaryCall<UserInfo, UserInfo>;
    /**
     * @generated from protobuf rpc: Leave(UserInfo) returns (EmptyMessage);
     */
    leave(input: UserInfo, options?: RpcOptions): UnaryCall<UserInfo, EmptyMessage>;
    /**
     * @generated from protobuf rpc: UpdateUserStatus(UserInfo) returns (EmptyMessage);
     */
    updateUserStatus(input: UserInfo, options?: RpcOptions): UnaryCall<UserInfo, EmptyMessage>;
    /**
     * @generated from protobuf rpc: AddNode(Node) returns (Node);
     */
    addNode(input: Node, options?: RpcOptions): UnaryCall<Node, Node>;
    /**
     * @generated from protobuf rpc: UpdateNode(Node) returns (EmptyMessage);
     */
    updateNode(input: Node, options?: RpcOptions): UnaryCall<Node, EmptyMessage>;
    /**
     * @generated from protobuf rpc: RemoveNode(Node) returns (EmptyMessage);
     */
    removeNode(input: Node, options?: RpcOptions): UnaryCall<Node, EmptyMessage>;
    /**
     * @generated from protobuf rpc: MergeNodes(NodeList) returns (EmptyMessage);
     */
    mergeNodes(input: NodeList, options?: RpcOptions): UnaryCall<NodeList, EmptyMessage>;
    /**
     * @generated from protobuf rpc: AddLink(Link) returns (EmptyMessage);
     */
    addLink(input: Link, options?: RpcOptions): UnaryCall<Link, EmptyMessage>;
    /**
     * @generated from protobuf rpc: UpdateLink(Link) returns (EmptyMessage);
     */
    updateLink(input: Link, options?: RpcOptions): UnaryCall<Link, EmptyMessage>;
    /**
     * @generated from protobuf rpc: RemoveLink(Link) returns (EmptyMessage);
     */
    removeLink(input: Link, options?: RpcOptions): UnaryCall<Link, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetDoument(RequestById) returns (Document);
     */
    getDoument(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, Document>;
    /**
     * @generated from protobuf rpc: UpdateDocumentState(RequestById) returns (EmptyMessage);
     */
    updateDocumentState(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetAllDouments(RequestById) returns (stream DocumentList);
     */
    getAllDouments(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, DocumentList>;
    /**
     * @generated from protobuf rpc: GetDocumentState(RequestById) returns (stream DocumentState);
     */
    getDocumentState(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, DocumentState>;
    /**
     * @generated from protobuf rpc: SendBoardcastMessage(BoardcastMessage) returns (EmptyMessage);
     */
    sendBoardcastMessage(input: BoardcastMessage, options?: RpcOptions): UnaryCall<BoardcastMessage, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetBoardcastMessage(RequestById) returns (stream BoardcastMessage);
     */
    getBoardcastMessage(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, BoardcastMessage>;
    /**
     * @generated from protobuf rpc: GetReplayList(RequestById) returns (ReplayList);
     */
    getReplayList(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, ReplayList>;
    /**
     * @generated from protobuf rpc: GetReplay(ReplayMessage) returns (stream ReplayMessage);
     */
    getReplay(input: ReplayMessage, options?: RpcOptions): ServerStreamingCall<ReplayMessage, ReplayMessage>;
    /**
     * @generated from protobuf rpc: SetWebRTCOffer(RequestById) returns (EmptyMessage);
     */
    setWebRTCOffer(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetWebRTCOffer(RequestById) returns (WebRTCOffer);
     */
    getWebRTCOffer(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, WebRTCOffer>;
    /**
     * @generated from protobuf rpc: GetWebRTCOfferStream(RequestById) returns (stream WebRTCOffer);
     */
    getWebRTCOfferStream(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, WebRTCOffer>;
    /**
     * @generated from protobuf rpc: SetWebRTCAnswer(RequestById) returns (EmptyMessage);
     */
    setWebRTCAnswer(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetWebRTCAnswer(RequestById) returns (WebRTCAnswer);
     */
    getWebRTCAnswer(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, WebRTCAnswer>;
    /**
     * @generated from protobuf rpc: GetWebRTCAnswerStream(RequestById) returns (stream WebRTCAnswer);
     */
    getWebRTCAnswerStream(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, WebRTCAnswer>;
    /**
     * @generated from protobuf rpc: GetTrackerInfoStream(RequestById) returns (stream TrackerInfo);
     */
    getTrackerInfoStream(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, TrackerInfo>;
    /**
     * @generated from protobuf rpc: GetTimelineDataStream(RequestById) returns (stream TimelineData);
     */
    getTimelineDataStream(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, TimelineData>;
}
/**
 * @generated from protobuf service EchoService
 */
export class EchoServiceClient implements IEchoServiceClient, ServiceInfo {
    typeName = EchoService.typeName;
    methods = EchoService.methods;
    options = EchoService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetInitialGraphData(InitialRequest) returns (InitialGraphData);
     */
    getInitialGraphData(input: InitialRequest, options?: RpcOptions): UnaryCall<InitialRequest, InitialGraphData> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<InitialRequest, InitialGraphData>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateNodesStatus(ClientActions) returns (ServerNodesStatus);
     */
    updateNodesStatus(input: ClientActions, options?: RpcOptions): UnaryCall<ClientActions, ServerNodesStatus> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ClientActions, ServerNodesStatus>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetGraphData(RequestById) returns (stream GraphViewData);
     */
    getGraphData(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, GraphViewData> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, GraphViewData>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetNodes(InitialRequest) returns (stream NodeList);
     */
    getNodes(input: InitialRequest, options?: RpcOptions): ServerStreamingCall<InitialRequest, NodeList> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<InitialRequest, NodeList>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetLinks(RequestById) returns (stream LinkList);
     */
    getLinks(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, LinkList> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, LinkList>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetNodesStatus(RequestById) returns (stream ServerNodesStatus);
     */
    getNodesStatus(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, ServerNodesStatus> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, ServerNodesStatus>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllUsers(EmptyMessage) returns (stream UserList);
     */
    getAllUsers(input: EmptyMessage, options?: RpcOptions): ServerStreamingCall<EmptyMessage, UserList> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyMessage, UserList>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllUsersByRoomId(RequestById) returns (stream UserList);
     */
    getAllUsersByRoomId(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, UserList> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, UserList>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllRooms(EmptyMessage) returns (stream RoomList);
     */
    getAllRooms(input: EmptyMessage, options?: RpcOptions): ServerStreamingCall<EmptyMessage, RoomList> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyMessage, RoomList>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Join(UserInfo) returns (UserInfo);
     */
    join(input: UserInfo, options?: RpcOptions): UnaryCall<UserInfo, UserInfo> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserInfo, UserInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Leave(UserInfo) returns (EmptyMessage);
     */
    leave(input: UserInfo, options?: RpcOptions): UnaryCall<UserInfo, EmptyMessage> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserInfo, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUserStatus(UserInfo) returns (EmptyMessage);
     */
    updateUserStatus(input: UserInfo, options?: RpcOptions): UnaryCall<UserInfo, EmptyMessage> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserInfo, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddNode(Node) returns (Node);
     */
    addNode(input: Node, options?: RpcOptions): UnaryCall<Node, Node> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<Node, Node>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateNode(Node) returns (EmptyMessage);
     */
    updateNode(input: Node, options?: RpcOptions): UnaryCall<Node, EmptyMessage> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<Node, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveNode(Node) returns (EmptyMessage);
     */
    removeNode(input: Node, options?: RpcOptions): UnaryCall<Node, EmptyMessage> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<Node, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MergeNodes(NodeList) returns (EmptyMessage);
     */
    mergeNodes(input: NodeList, options?: RpcOptions): UnaryCall<NodeList, EmptyMessage> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<NodeList, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddLink(Link) returns (EmptyMessage);
     */
    addLink(input: Link, options?: RpcOptions): UnaryCall<Link, EmptyMessage> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<Link, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateLink(Link) returns (EmptyMessage);
     */
    updateLink(input: Link, options?: RpcOptions): UnaryCall<Link, EmptyMessage> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<Link, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveLink(Link) returns (EmptyMessage);
     */
    removeLink(input: Link, options?: RpcOptions): UnaryCall<Link, EmptyMessage> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<Link, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetDoument(RequestById) returns (Document);
     */
    getDoument(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, Document> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, Document>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateDocumentState(RequestById) returns (EmptyMessage);
     */
    updateDocumentState(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, EmptyMessage> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllDouments(RequestById) returns (stream DocumentList);
     */
    getAllDouments(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, DocumentList> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, DocumentList>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetDocumentState(RequestById) returns (stream DocumentState);
     */
    getDocumentState(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, DocumentState> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, DocumentState>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendBoardcastMessage(BoardcastMessage) returns (EmptyMessage);
     */
    sendBoardcastMessage(input: BoardcastMessage, options?: RpcOptions): UnaryCall<BoardcastMessage, EmptyMessage> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<BoardcastMessage, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBoardcastMessage(RequestById) returns (stream BoardcastMessage);
     */
    getBoardcastMessage(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, BoardcastMessage> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, BoardcastMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetReplayList(RequestById) returns (ReplayList);
     */
    getReplayList(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, ReplayList> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, ReplayList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetReplay(ReplayMessage) returns (stream ReplayMessage);
     */
    getReplay(input: ReplayMessage, options?: RpcOptions): ServerStreamingCall<ReplayMessage, ReplayMessage> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReplayMessage, ReplayMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetWebRTCOffer(RequestById) returns (EmptyMessage);
     */
    setWebRTCOffer(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, EmptyMessage> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetWebRTCOffer(RequestById) returns (WebRTCOffer);
     */
    getWebRTCOffer(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, WebRTCOffer> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, WebRTCOffer>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetWebRTCOfferStream(RequestById) returns (stream WebRTCOffer);
     */
    getWebRTCOfferStream(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, WebRTCOffer> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, WebRTCOffer>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetWebRTCAnswer(RequestById) returns (EmptyMessage);
     */
    setWebRTCAnswer(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, EmptyMessage> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, EmptyMessage>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetWebRTCAnswer(RequestById) returns (WebRTCAnswer);
     */
    getWebRTCAnswer(input: RequestById, options?: RpcOptions): UnaryCall<RequestById, WebRTCAnswer> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, WebRTCAnswer>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetWebRTCAnswerStream(RequestById) returns (stream WebRTCAnswer);
     */
    getWebRTCAnswerStream(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, WebRTCAnswer> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, WebRTCAnswer>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrackerInfoStream(RequestById) returns (stream TrackerInfo);
     */
    getTrackerInfoStream(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, TrackerInfo> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, TrackerInfo>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTimelineDataStream(RequestById) returns (stream TimelineData);
     */
    getTimelineDataStream(input: RequestById, options?: RpcOptions): ServerStreamingCall<RequestById, TimelineData> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestById, TimelineData>("serverStreaming", this._transport, method, opt, input);
    }
}
