// @generated by protobuf-ts 2.9.0 with parameter server_grpc1,client_none,optimize_code_size
// @generated from protobuf file "message.proto" (syntax proto3)
// tslint:disable
import { TimelineData } from "./message";
import { TrackerInfo } from "./message";
import { WebRTCAnswer } from "./message";
import { WebRTCOffer } from "./message";
import { ReplayMessage } from "./message";
import { ReplayList } from "./message";
import { BoardcastMessage } from "./message";
import { DocumentState } from "./message";
import { DocumentList } from "./message";
import { Document } from "./message";
import { Link } from "./message";
import { Node } from "./message";
import { UserInfo } from "./message";
import { RoomList } from "./message";
import { UserList } from "./message";
import { EmptyMessage } from "./message";
import { LinkList } from "./message";
import { NodeList } from "./message";
import { GraphViewData } from "./message";
import { RequestById } from "./message";
import { ServerNodesStatus } from "./message";
import { ClientActions } from "./message";
import { InitialGraphData } from "./message";
import { InitialRequest } from "./message";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service EchoService
 */
export interface IEchoService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetInitialGraphData(InitialRequest) returns (InitialGraphData);
     */
    getInitialGraphData: grpc.handleUnaryCall<InitialRequest, InitialGraphData>;
    /**
     * @generated from protobuf rpc: UpdateNodesStatus(ClientActions) returns (ServerNodesStatus);
     */
    updateNodesStatus: grpc.handleUnaryCall<ClientActions, ServerNodesStatus>;
    /**
     * @generated from protobuf rpc: GetGraphData(RequestById) returns (stream GraphViewData);
     */
    getGraphData: grpc.handleServerStreamingCall<RequestById, GraphViewData>;
    /**
     * @generated from protobuf rpc: GetNodes(InitialRequest) returns (stream NodeList);
     */
    getNodes: grpc.handleServerStreamingCall<InitialRequest, NodeList>;
    /**
     * @generated from protobuf rpc: GetLinks(RequestById) returns (stream LinkList);
     */
    getLinks: grpc.handleServerStreamingCall<RequestById, LinkList>;
    /**
     * @generated from protobuf rpc: GetNodesStatus(RequestById) returns (stream ServerNodesStatus);
     */
    getNodesStatus: grpc.handleServerStreamingCall<RequestById, ServerNodesStatus>;
    /**
     * @generated from protobuf rpc: GetAllUsers(EmptyMessage) returns (stream UserList);
     */
    getAllUsers: grpc.handleServerStreamingCall<EmptyMessage, UserList>;
    /**
     * @generated from protobuf rpc: GetAllUsersByRoomId(RequestById) returns (stream UserList);
     */
    getAllUsersByRoomId: grpc.handleServerStreamingCall<RequestById, UserList>;
    /**
     * @generated from protobuf rpc: GetAllRooms(EmptyMessage) returns (stream RoomList);
     */
    getAllRooms: grpc.handleServerStreamingCall<EmptyMessage, RoomList>;
    /**
     * @generated from protobuf rpc: Join(UserInfo) returns (UserInfo);
     */
    join: grpc.handleUnaryCall<UserInfo, UserInfo>;
    /**
     * @generated from protobuf rpc: Leave(UserInfo) returns (EmptyMessage);
     */
    leave: grpc.handleUnaryCall<UserInfo, EmptyMessage>;
    /**
     * @generated from protobuf rpc: UpdateUserStatus(UserInfo) returns (EmptyMessage);
     */
    updateUserStatus: grpc.handleUnaryCall<UserInfo, EmptyMessage>;
    /**
     * @generated from protobuf rpc: AddNode(Node) returns (Node);
     */
    addNode: grpc.handleUnaryCall<Node, Node>;
    /**
     * @generated from protobuf rpc: UpdateNode(Node) returns (EmptyMessage);
     */
    updateNode: grpc.handleUnaryCall<Node, EmptyMessage>;
    /**
     * @generated from protobuf rpc: RemoveNode(Node) returns (EmptyMessage);
     */
    removeNode: grpc.handleUnaryCall<Node, EmptyMessage>;
    /**
     * @generated from protobuf rpc: MergeNodes(NodeList) returns (EmptyMessage);
     */
    mergeNodes: grpc.handleUnaryCall<NodeList, EmptyMessage>;
    /**
     * @generated from protobuf rpc: AddLink(Link) returns (EmptyMessage);
     */
    addLink: grpc.handleUnaryCall<Link, EmptyMessage>;
    /**
     * @generated from protobuf rpc: UpdateLink(Link) returns (EmptyMessage);
     */
    updateLink: grpc.handleUnaryCall<Link, EmptyMessage>;
    /**
     * @generated from protobuf rpc: RemoveLink(Link) returns (EmptyMessage);
     */
    removeLink: grpc.handleUnaryCall<Link, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetDoument(RequestById) returns (Document);
     */
    getDoument: grpc.handleUnaryCall<RequestById, Document>;
    /**
     * @generated from protobuf rpc: UpdateDocumentState(RequestById) returns (EmptyMessage);
     */
    updateDocumentState: grpc.handleUnaryCall<RequestById, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetAllDouments(RequestById) returns (stream DocumentList);
     */
    getAllDouments: grpc.handleServerStreamingCall<RequestById, DocumentList>;
    /**
     * @generated from protobuf rpc: GetDocumentState(RequestById) returns (stream DocumentState);
     */
    getDocumentState: grpc.handleServerStreamingCall<RequestById, DocumentState>;
    /**
     * @generated from protobuf rpc: SendBoardcastMessage(BoardcastMessage) returns (EmptyMessage);
     */
    sendBoardcastMessage: grpc.handleUnaryCall<BoardcastMessage, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetBoardcastMessage(RequestById) returns (stream BoardcastMessage);
     */
    getBoardcastMessage: grpc.handleServerStreamingCall<RequestById, BoardcastMessage>;
    /**
     * @generated from protobuf rpc: GetReplayList(RequestById) returns (ReplayList);
     */
    getReplayList: grpc.handleUnaryCall<RequestById, ReplayList>;
    /**
     * @generated from protobuf rpc: GetReplay(ReplayMessage) returns (stream ReplayMessage);
     */
    getReplay: grpc.handleServerStreamingCall<ReplayMessage, ReplayMessage>;
    /**
     * @generated from protobuf rpc: SetWebRTCOffer(RequestById) returns (EmptyMessage);
     */
    setWebRTCOffer: grpc.handleUnaryCall<RequestById, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetWebRTCOffer(RequestById) returns (WebRTCOffer);
     */
    getWebRTCOffer: grpc.handleUnaryCall<RequestById, WebRTCOffer>;
    /**
     * @generated from protobuf rpc: GetWebRTCOfferStream(RequestById) returns (stream WebRTCOffer);
     */
    getWebRTCOfferStream: grpc.handleServerStreamingCall<RequestById, WebRTCOffer>;
    /**
     * @generated from protobuf rpc: SetWebRTCAnswer(RequestById) returns (EmptyMessage);
     */
    setWebRTCAnswer: grpc.handleUnaryCall<RequestById, EmptyMessage>;
    /**
     * @generated from protobuf rpc: GetWebRTCAnswer(RequestById) returns (WebRTCAnswer);
     */
    getWebRTCAnswer: grpc.handleUnaryCall<RequestById, WebRTCAnswer>;
    /**
     * @generated from protobuf rpc: GetWebRTCAnswerStream(RequestById) returns (stream WebRTCAnswer);
     */
    getWebRTCAnswerStream: grpc.handleServerStreamingCall<RequestById, WebRTCAnswer>;
    /**
     * @generated from protobuf rpc: GetTrackerInfoStream(RequestById) returns (stream TrackerInfo);
     */
    getTrackerInfoStream: grpc.handleServerStreamingCall<RequestById, TrackerInfo>;
    /**
     * @generated from protobuf rpc: GetTimelineDataStream(RequestById) returns (stream TimelineData);
     */
    getTimelineDataStream: grpc.handleServerStreamingCall<RequestById, TimelineData>;
}
/**
 * @grpc/grpc-js definition for the protobuf service EchoService.
 *
 * Usage: Implement the interface IEchoService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IEchoService = ...
 * server.addService(echoServiceDefinition, service);
 * ```
 */
export const echoServiceDefinition: grpc.ServiceDefinition<IEchoService> = {
    getInitialGraphData: {
        path: "/EchoService/GetInitialGraphData",
        originalName: "GetInitialGraphData",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => InitialGraphData.fromBinary(bytes),
        requestDeserialize: bytes => InitialRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(InitialGraphData.toBinary(value)),
        requestSerialize: value => Buffer.from(InitialRequest.toBinary(value))
    },
    updateNodesStatus: {
        path: "/EchoService/UpdateNodesStatus",
        originalName: "UpdateNodesStatus",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ServerNodesStatus.fromBinary(bytes),
        requestDeserialize: bytes => ClientActions.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ServerNodesStatus.toBinary(value)),
        requestSerialize: value => Buffer.from(ClientActions.toBinary(value))
    },
    getGraphData: {
        path: "/EchoService/GetGraphData",
        originalName: "GetGraphData",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => GraphViewData.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GraphViewData.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getNodes: {
        path: "/EchoService/GetNodes",
        originalName: "GetNodes",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => NodeList.fromBinary(bytes),
        requestDeserialize: bytes => InitialRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(NodeList.toBinary(value)),
        requestSerialize: value => Buffer.from(InitialRequest.toBinary(value))
    },
    getLinks: {
        path: "/EchoService/GetLinks",
        originalName: "GetLinks",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => LinkList.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(LinkList.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getNodesStatus: {
        path: "/EchoService/GetNodesStatus",
        originalName: "GetNodesStatus",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => ServerNodesStatus.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ServerNodesStatus.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getAllUsers: {
        path: "/EchoService/GetAllUsers",
        originalName: "GetAllUsers",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => UserList.fromBinary(bytes),
        requestDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        responseSerialize: value => Buffer.from(UserList.toBinary(value)),
        requestSerialize: value => Buffer.from(EmptyMessage.toBinary(value))
    },
    getAllUsersByRoomId: {
        path: "/EchoService/GetAllUsersByRoomId",
        originalName: "GetAllUsersByRoomId",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => UserList.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(UserList.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getAllRooms: {
        path: "/EchoService/GetAllRooms",
        originalName: "GetAllRooms",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => RoomList.fromBinary(bytes),
        requestDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        responseSerialize: value => Buffer.from(RoomList.toBinary(value)),
        requestSerialize: value => Buffer.from(EmptyMessage.toBinary(value))
    },
    join: {
        path: "/EchoService/Join",
        originalName: "Join",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => UserInfo.fromBinary(bytes),
        requestDeserialize: bytes => UserInfo.fromBinary(bytes),
        responseSerialize: value => Buffer.from(UserInfo.toBinary(value)),
        requestSerialize: value => Buffer.from(UserInfo.toBinary(value))
    },
    leave: {
        path: "/EchoService/Leave",
        originalName: "Leave",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => UserInfo.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(UserInfo.toBinary(value))
    },
    updateUserStatus: {
        path: "/EchoService/UpdateUserStatus",
        originalName: "UpdateUserStatus",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => UserInfo.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(UserInfo.toBinary(value))
    },
    addNode: {
        path: "/EchoService/AddNode",
        originalName: "AddNode",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Node.fromBinary(bytes),
        requestDeserialize: bytes => Node.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Node.toBinary(value)),
        requestSerialize: value => Buffer.from(Node.toBinary(value))
    },
    updateNode: {
        path: "/EchoService/UpdateNode",
        originalName: "UpdateNode",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => Node.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(Node.toBinary(value))
    },
    removeNode: {
        path: "/EchoService/RemoveNode",
        originalName: "RemoveNode",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => Node.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(Node.toBinary(value))
    },
    mergeNodes: {
        path: "/EchoService/MergeNodes",
        originalName: "MergeNodes",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => NodeList.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(NodeList.toBinary(value))
    },
    addLink: {
        path: "/EchoService/AddLink",
        originalName: "AddLink",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => Link.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(Link.toBinary(value))
    },
    updateLink: {
        path: "/EchoService/UpdateLink",
        originalName: "UpdateLink",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => Link.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(Link.toBinary(value))
    },
    removeLink: {
        path: "/EchoService/RemoveLink",
        originalName: "RemoveLink",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => Link.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(Link.toBinary(value))
    },
    getDoument: {
        path: "/EchoService/GetDoument",
        originalName: "GetDoument",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Document.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Document.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    updateDocumentState: {
        path: "/EchoService/UpdateDocumentState",
        originalName: "UpdateDocumentState",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getAllDouments: {
        path: "/EchoService/GetAllDouments",
        originalName: "GetAllDouments",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => DocumentList.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(DocumentList.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getDocumentState: {
        path: "/EchoService/GetDocumentState",
        originalName: "GetDocumentState",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => DocumentState.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(DocumentState.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    sendBoardcastMessage: {
        path: "/EchoService/SendBoardcastMessage",
        originalName: "SendBoardcastMessage",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => BoardcastMessage.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(BoardcastMessage.toBinary(value))
    },
    getBoardcastMessage: {
        path: "/EchoService/GetBoardcastMessage",
        originalName: "GetBoardcastMessage",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => BoardcastMessage.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(BoardcastMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getReplayList: {
        path: "/EchoService/GetReplayList",
        originalName: "GetReplayList",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ReplayList.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ReplayList.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getReplay: {
        path: "/EchoService/GetReplay",
        originalName: "GetReplay",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => ReplayMessage.fromBinary(bytes),
        requestDeserialize: bytes => ReplayMessage.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ReplayMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(ReplayMessage.toBinary(value))
    },
    setWebRTCOffer: {
        path: "/EchoService/SetWebRTCOffer",
        originalName: "SetWebRTCOffer",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getWebRTCOffer: {
        path: "/EchoService/GetWebRTCOffer",
        originalName: "GetWebRTCOffer",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => WebRTCOffer.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(WebRTCOffer.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getWebRTCOfferStream: {
        path: "/EchoService/GetWebRTCOfferStream",
        originalName: "GetWebRTCOfferStream",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => WebRTCOffer.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(WebRTCOffer.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    setWebRTCAnswer: {
        path: "/EchoService/SetWebRTCAnswer",
        originalName: "SetWebRTCAnswer",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyMessage.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyMessage.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getWebRTCAnswer: {
        path: "/EchoService/GetWebRTCAnswer",
        originalName: "GetWebRTCAnswer",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => WebRTCAnswer.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(WebRTCAnswer.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getWebRTCAnswerStream: {
        path: "/EchoService/GetWebRTCAnswerStream",
        originalName: "GetWebRTCAnswerStream",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => WebRTCAnswer.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(WebRTCAnswer.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getTrackerInfoStream: {
        path: "/EchoService/GetTrackerInfoStream",
        originalName: "GetTrackerInfoStream",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => TrackerInfo.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(TrackerInfo.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    },
    getTimelineDataStream: {
        path: "/EchoService/GetTimelineDataStream",
        originalName: "GetTimelineDataStream",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => TimelineData.fromBinary(bytes),
        requestDeserialize: bytes => RequestById.fromBinary(bytes),
        responseSerialize: value => Buffer.from(TimelineData.toBinary(value)),
        requestSerialize: value => Buffer.from(RequestById.toBinary(value))
    }
};
